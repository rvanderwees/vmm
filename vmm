#!/bin/bash
set -eu

# Defaults, can be overridden by cmd line or store personal defaults in ~/.vmm.conf.
# This can include a custom kickstart template using KS{7,8,9}TEMPLATE.
MEM="4096"
VCPUS="2"
KSTEMPLATE=""
BASENAME=""
SSHPARAM="-l admin"
DISKSIZE=10
DISKRESIZE=
SMREGISTER=""
SMUSERNAME=""
SMPASSWORD=""
SMACTKEY=""
SMORGID=""
SMSYSNAME=""
UPDATE=""
KS7TEMPLATE='#version=RHEL7
cdrom
lang en_US.UTF-8
keyboard us
timezone Europe/Amsterdam --isUtc
network --bootproto=dhcp --device=eth0 --ipv6=auto --activate
network --hostname=__HOSTNAME__
text
clearpart --initlabel --drives=vda
autopart --type=plain --nohome
bootloader --location=mbr --boot-drive=vda
auth --enableshadow --passalgo=sha512
rootpw --lock
selinux --enforcing
firewall --enabled --ssh
skipx
firstboot --disable
reboot

%packages
# Install Infrastructure Server group (optionally replace with "@^minimal" in case a base OS is needed)
@^infrastructure-server-environment
#cloud-init
%end

%post --log=/root/ks-post.log
rpmkeys --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
%end
'
KS8TEMPLATE='#version=RHEL8
ignoredisk --only-use=vda
clearpart --initlabel --drives=vda
autopart --type=plain --nohome
text
repo --name="AppStream" --baseurl=file:///run/install/repo/AppStream
keyboard --vckeymap=us --xlayouts="us"
lang en_US.UTF-8
network --bootproto=dhcp --device=eth0 --ipv6=auto --activate
network --hostname=__HOSTNAME__
rootpw --lock
selinux --enforcing
firewall --enabled --ssh
firstboot --disable
skipx
services --enabled="chronyd"
syspurpose --role="Red Hat Enterprise Linux Server" --sla="Self Support" --usage="Development/Test"
timezone Europe/Amsterdam --isUtc
reboot

%packages
# Install Infrastructure Server group (optionally replace with "@^minimal-environment" in case a base OS is needed)
@^server-product-environment
cloud-init
%end

# Post installation config
%post --log=/root/ks-post.log
rpmkeys --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
%end
'
KS9TEMPLATE='# Generated by Anaconda 34.25.0.29
# Generated by pykickstart v3.32
#version=RHEL9
# Generated using Blivet version 3.4.0
clearpart --initlabel --drives=vda
autopart --type=plain --nohome
text
repo --name="AppStream" --baseurl=file:///run/install/sources/mount-0000-cdrom/AppStream
keyboard --xlayouts="us"
lang en_US.UTF-8
network --bootproto=dhcp --device=eth0 --ipv6=auto --activate
network --hostname=__HOSTNAME__
cdrom
firstboot --disable
skipx
services --enabled="chronyd"
syspurpose --role="Red Hat Enterprise Linux Server" --sla="Self Support" --usage="Development/Test"
timezone Europe/Amsterdam --utc
rootpw --lock
reboot

%packages
# Install Infrastructure Server group (optionally replace with "@^minimal-environment" in case a base OS is needed)
@^server-product-environment
cloud-init
cloud-utils-growpart
%end

# Post installation config
%post --log=/root/ks-post.log
rpmkeys --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
%end
'

help() {
	ME=$(basename $0)
	cat <<- EOF
	$ME {help | dumpks | createbase | clone | connect} (-m mem) (-c vcpus) (-t template) (-n baseimagename) {version} {name}

	COMMANDS:
	    dumpks | dk		Display the kickstart template rather then creating a new base image
	    createbase | cb	Create a new base image
	    clone		Create a new vm from base image with version
	    connect | con	Connect to the new VM using the libvirt-nss nsswitch.conf module


	Dump KS template options:
	$ME dumpks {version}


	Create base options:
	$ME createbase {-t template} {-n baseimagename} {-s size} {version}

	    -t		Filename of the kickstart template to use instead of the build in default
			(i.e. for debugging purposes)
	    -n		Specify the base image name (default "rhel{x.y}base")
	    -s		Specify disk size in Gb (default 10Gb)
	    version	RHEL Version of the base image to create. I.e.: 9.3


	Clone options
	$ME clone {-m mem} {-c vcpus} {-R [+]disksize} {-n baseimagename} {-d domain} {-r} {-u user -p passwd | -a actkey -o orgid} {-S systemname} -U {version} {name}

	    -m		Memory for the new clone in Gb (default 4Gb)
	    -c		Number of vCPUs for the new clone VM (default 2 vCPUs)
	    -R		Specify if the cloned disk needs to be resized. This parameter is passed directly
			to qemu-img (see man 1 qemu-img). The cloud-init will take care of resizing the partition
                        and filesystem inside of the VM.
	    -n		Specify the base image name to clone from (default "rhel{x.y}base")
	    -d		Domain name to use in cloud-init for setting the FQDN in the cloned VM
	    -r		Register the VM after cloning (either using username + password or activation key and org-id
	    -u		Username to login to the Red Hat Customer Portal for registring the VM
	    -p		Password to login to the Red Hat Customer Portal for registring the VM
	    -a		Activation key to register the VM with the Red Hat Customer Portal (requiers -o)
	    -o		Org ID to register the VM with the Red Hat Customer Portal (requiers -a)
	    -S		Set the system name during registration (default <actkey>-<vmname> | <username>-<vmname>)
	    -U		Run "yum -y update" after registering the VM
	    version	RHEL Version for the new vm. I.e.: 9.3
	                Will be used for libvirt's "--os-variant' option but also for the base image to clone from if -n is not specified
	    name	Name of the new VM


	Connect options:
	$ME connect {ssh_option} {ssh_connection_string}

	    Any valid ssh option can be specified here but at a minimum the hostname.
	    If configured, it can utilize the libvirt-nss module to determina the VMs ip address from the dnsmasq DHCP leases.
	    Since the cloud-init template creates a default "admin" user, the default login name will be set to "-l admin" unless
	    the -l option is already give or the ssh connection string cantains a "@".
	    The "-o StrictHostKeyChecking=no" and "-o UserKnownHostsFile=/dev/null" are added by default to allow
	    easier access to (short lived) VMs (can be insecure).
		
	EOF
	exit 1
}


# Raise sudo privileges and keep the "alive"
raisepriv() {
	# Define a tmp file for either kickstart of cloud-init user-data
	TMPFILE=$(mktemp)

	# This command just list the available sudo commands but running in a loop will keep the timestamp allive
	echo "This command requires sudo privileges. Please enter your sudo password (if needed):"
	sudo -l > /dev/null
	bash -c "while : ; do sudo -l > /dev/null; sleep 60; done" &
	LOOP="$!"

	# Make sure the tmpfile is removed and the sudo loop is killed when we exit or something fails
	trap "kill $LOOP; rm -f $TMPFILE" EXIT
}


# Output the kickstart template for the given version
dumpkstemplate() {
	VERSION="$1"
	MAJOR="$(echo $VERSION | sed -e 's/\([0-9]*\)\.\([0-9]*\)/\1/')"
	if [ -n "$KSTEMPLATE" ]
	then
		cat "$KSTEMPLATE"
	else
		eval echo \""\$KS${MAJOR}TEMPLATE"\" # | base64 -d 
	fi
}

# Kickstart a base image
createbase() {
	# Defaults
	VERSION="$1"
	MAJOR="$(echo $VERSION | sed -e 's/\([0-9]*\)\.\([0-9]*\)/\1/')"
	MINOR="$(echo $VERSION | sed -e 's/\([0-9]*\)\.\([0-9]*\)/\2/')"
	VARIANT="rhel${VERSION}"
	if [ -n "$BASENAME" ]
	then
		VMNAME="$BASENAME"
	else
		VMNAME="rhel${MAJOR}${MINOR}base"
	fi

	# Set specifics per version
	case "$VERSION" in
	7*)
		ISO="rhel-server-7.${MINOR}-x86_64-dvd.iso"
		;;
	8*)
		ISO="rhel-8.${MINOR}-x86_64-dvd.iso"
		;;
	9.1)
		ISO="rhel-baseos-9.1-x86_64-dvd.iso"
		;;
	9*)
		ISO="rhel-9.${MINOR}-x86_64-dvd.iso"
		;;
	*)
		echo "Unknow or unsupported version"
		exit 1
		;;
	esac

	# Create temporary kickstart file from template
	dumpkstemplate "$VERSION" | 
		sed -e "s/__HOSTNAME__/$VMNAME/" > "$TMPFILE"

	# Kickstart a new base image
	# ToDo:
	#   - net.ifnames=0 is not safe, check https://access.redhat.com/solutions/2435891
	#     for additonal things to set.
	/usr/bin/virt-install \
		--virt-type kvm \
		--name "$VMNAME" \
		--memory 4096 \
		--vcpus 2 \
		--location "/var/lib/libvirt/images/$ISO" \
		--os-variant "$VARIANT" \
		--disk size=${DISKSIZE},bus=virtio,pool=default \
		--network network=default \
		--extra-arg "console=tty0 console=ttyS0,115200n8 net.ifnames=0 inst.ks=file:/$(basename $TMPFILE)" \
		--initrd-inject "$TMPFILE" \
		--serial pty \
		--graphics vnc \
		--graphics spice \
		--noreboot \
		--noautoconsole \
		--wait -1 2>&1

	# Seal the image
	sudo virt-sysprep -d "${VMNAME}" --selinux-relabel

	# Remove unused empty block (sparsify)
	sudo virt-sparsify --tmp /var/lib/libvirt/images /var/lib/libvirt/images/$VMNAME.qcow2 /var/lib/libvirt/images/$VMNAME-tmp.qcow2
	sudo mv /var/lib/libvirt/images/$VMNAME-tmp.qcow2 /var/lib/libvirt/images/$VMNAME.qcow2
}

# Clone a base image to a VM
clone() {
	VERSION="$1"
	VMNAME="$2"
	MAJOR="$(echo $VERSION | sed -e 's/\([0-9]*\)\.\([0-9]*\)/\1/')"
	MINOR="$(echo $VERSION | sed -e 's/\([0-9]*\)\.\([0-9]*\)/\2/')"
	if [ -z "$BASENAME" ]
	then
		BASENAME="rhel${MAJOR}${MINOR}base"
	fi
	VARIANT="rhel${VERSION}"

	# Read public key files to be added to cloud-init config
	pubkey=""
	for pkf in id_dsa.pub id_ecdsa.pub id_ecdsa_sk.pub id_ed25519.pub id_ed25519_sk.pub id_rsa.pub
	do
		if [ -f "$HOME/.ssh/$pkf" ]
		then
			pubkey="$pubkey      - $(< $HOME/.ssh/$pkf)\n"
		fi
	done
	if [ -z "${pubkey}" ]
	then
		echo "No public key file(s) found!"
		exit 1
	fi

	# Do we need to register the machine?
	if [ -n "$SMREGISTER" ]
	then
		# We use the runcmd module i.s.o. rh_subscription because we want to be able to pass the sysname
		SMREGISTERCMD="runcmd:"
		if [ -n "$SMUSERNAME" ] && [ -n "$SMPASSWORD" ]
	       	then
			SMREGISTERCMD="$MMREGISTERCMD\n  - subscription-manager register --username '${SMUSERNAME}' --password '${SMPASSWORD}' --name '${SMSYSNAME:-${SMUSERNAME}-${VMNAME}}'"
		elif [ -n "$SMACTKEY" ] && [ -n "$SMORGID" ]
		then
			SMREGISTERCMD="$SMREGISTERCMD\n  - subscription-manager register --activationkey '${SMACTKEY}' --org '${SMORGID}' --name '${SMSYSNAME:-${SMACTKEY}-${VMNAME}}'"
		else
			echo "Invalid registration information!"
			exit 1
		fi

		# After registration, do we need to update all packages?
		if [ -n "$UPDATE" ]
		then
			SMREGISTERCMD="$SMREGISTERCMD\n  - yum -y makecache"
			SMREGISTERCMD="$SMREGISTERCMD\n  - yum -y upgrade"
		fi
	fi

	# Check is requested base image exists
	sudo stat "/var/lib/libvirt/images/${BASENAME}.qcow2" >/dev/null

	# Check is new image does not already exsists
	if sudo stat "/var/lib/libvirt/images/${VMNAME}.qcow2" >/dev/null 2>&1
	then
		echo "Image already exists!. Please remove before recreating with: virsh undefine $VMNAME --storage vda"
		exit 1
	fi
	
	# Create new new image
	sudo cp "/var/lib/libvirt/images/${BASENAME}.qcow2" "/var/lib/libvirt/images/${VMNAME}.qcow2"


	if [ -n "$DISKRESIZE" ]
	then
		sudo qemu-img resize "/var/lib/libvirt/images/${VMNAME}.qcow2" "$DISKRESIZE"
	fi

	# Prepare cloud-init data
	cat > "$TMPFILE" <<- EOF
	#cloud-config
	users:
	  - name: admin
	    gecos: "Admin user"
	    shell: /bin/bash
	    lock_passwd: true
	    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
	    ssh_authorized_keys:
	$(echo -e "$pubkey")
	ssh_pwauth: true
	network:
	  version: 1
	  config:
	    - type: physical
	      name: eth0
	      subnets:
	        - type: dhcp
	hostname: ${VMNAME}
	fqdn: ${VMNAME}.${DOMAIN:-example.com}
	$(echo -e "${SMREGISTERCMD:-# No registration with Red Hat Customer Portal}")
	power_state:
	  mode: reboot
	  message: Rebooting machine
	growpart:
	  mode: auto
	  devices: ["/"]
	resize_rootfs: true
	EOF

	# Import new image as a new VM and enable cloud-init
	sudo virt-install \
		--memory "$MEM"\
		--vcpus "$VCPUS" \
		--name "$VMNAME" \
		--disk "/var/lib/libvirt/images/${VMNAME}.qcow2" \
		--os-variant "$VARIANT" \
		--serial pty \
		--graphics vnc \
		--graphics spice \
		--import \
		--noreboot \
		--cloud-init "user-data=$TMPFILE" \
		--network network=default \
		--noautoconsole \
		--wait -1 2>&1
	virsh start "$VMNAME"
}



# Main

# If exist, source ~/.vmm.conf with variables override
if [ -f "$HOME/.vmm.conf" ]
then
	if [ "$(stat -c "%a" $HOME/.vmm.conf)" -ne 600 ]
	then
		echo "Refusing to use $HOME/.vmm.conf with insecure permissions!"
		exit 1
	fi
	source "$HOME/.vmm.conf"
fi


# Parse command and option
[ $# -lt 1 ] && help
COMMAND="$1"
shift

while getopts "m:c:R:t:n:d:s:ru:p:a:o:S:U" option
do
	case "$option" in
	m)
		MEM="$(( $OPTARG * 1024 ))"
		;;
	c)
		VCPUS="$OPTARG"
		;;
	R)
		DISKRESIZE="$OPTARG"
		;;
	t)
		KSTEMPLATE="$OPTARG"
		if [ ! -f "$KSTEMPLATE" ]
		then
			echo "Kickstart template \"$KSTEMPLATE\" does not exist!"
			exit 1
		fi
		;;
	n)
		BASENAME="$OPTARG"
		;;
	d)
		DOMAIN="$OPTARG"
		;;
	s)
		DISKSIZE="$OPTARG"
		;;
	r)
		SMREGISTER="true"
		;;
	u)
		SMUSERNAME="$OPTARG"
		;;
	p)
		SMPASSWORD="$OPTARG"
		;;
	a)
		SMACTKEY="$OPTARG"
		;;
	o)
		SMORGID="$OPTARG"
		;;
	S)
		SMSYSNAME="$OPTARG"
		;;
	U)
		UPDATE="true"
	esac
done
shift $(( $OPTIND - 1 ))

case "$COMMAND" in
help)
	help
	;;
dumpks|dk)
	# This is only for debugging purposes or to make adjustments to the ks template
	dumpkstemplate "$@"
	;;
createbase|cb)
	raisepriv
	createbase "$@"
	;;
clone)
	raisepriv
	clone "$@"
	;;
connect|con)
	# For temporary / short lived VMs, it convinient not to store the ssh host keys (caution: can be insecure)
	# The cloud-init config set a default user, so we default to this user in the "connect" command
	for i in "$@"
	do
		# If a user is given on the command line unset the default
		if echo "$i" | grep -E -q '@|^-l'
		then
			SSHPARAM=""
		fi
	done
	ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $SSHPARAM "$@"
	;;
*)
	echo "Unknown command!"
	;;
esac
